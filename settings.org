* Packages
#+BEGIN_SRC emacs-lisp
  ;; load package manager, add the Melpa package registry
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (package-initialize)

  ;; bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  ;; load evil
  (use-package evil
    :ensure t ;; install the evil package if not installed
    :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config ;; tweak evil after loading it
    (evil-mode)
    (define-prefix-command 'my-leader-map)
    ;(keymap-set evil-motion-state-map "SPC" 'my-leader-map)
    ;(keymap-set evil-normal-state-map "SPC" 'my-leader-map)
    ;; insert mode
    ;; leader maps
    ;; (evil-define-key nil my-leader-map
    ;;   "." 'execute-extended-command
    ;;   "ff" 'find-file)
    :hook (vterm-mode . turn-off-evil-mode)
    )

  (use-package vterm
    :ensure t
    :init
    :config
    (global-set-key (kbd "C-c t") 'vterm))

  (add-hook 'emacs-startup-hook 'eshell)

#+END_SRC

#+RESULTS:
: t
i* Startup
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (require 'exwm)
  (setq exwm-randr-workspace-monitor-plist '(1 "DisplayPort-3",
                                               2 "DisplayPort-2",
                                               3 "DisplayPort-1",
                                               4 "DisplayPort-0",
                                               5 "eDP"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()
              (start-process-shell-command
               "xrandr" nil "xrandr --output eDP --auto --output DisplayPort-3 --auto --primary --left-of eDP")))
  (exwm-randr-mode 1)

  (setq exwm-input-global-keys
        `(([?\s-r] . exwm-reset) ;; s-r: Reset (to line-mode).
          ([?\s-w] . exwm-workspace-switch) ;; s-w: Switch workspace.
          ([?\s-d] . (lambda (cmd) ;; s-&: Launch application.
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command cmd nil cmd)))
          ;; s-N: Switch to certain workspace.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
  (exwm-systemtray-mode)
  (exwm-enable)

  ;; Make buffer name more meaningful
  (add-hook 'exwm-update-class-hook
            (lambda ()
            (exwm-workspace-rename-buffer exwm-class-name)))
#+END_SRC
i* EXWM



#+RESULTS:
: ((buffer-predicate . exwm-layout--other-buffer-predicate) (vertical-scroll-bars) (left-fringe . 1) (right-fringe . 1))

* Key Maps
** Global
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c s") 'eshell)
  (global-set-key (kbd "C-x p f") 'project-find-file)
  (global-set-key (kbd "C-c r") 'project-find-regexp)
  (keyboard-translate ?\C-h ?\C-x)
  (keyboard-translate ?\C-x ?\C-h)
#+END_SRC

#+RESULTS:
: 8

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t)
  (use-package kanagawa-themes
    :ensure t
    :config
    (load-theme 'kanagawa-wave t))

#+END_SRC

#+RESULTS:
: t

* Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
            (lambda()
              (electric-pair-mode t)
              ))
#+END_SRC

* General
#+BEGIN_SRC emacs-lisp
  ;; Set correct tab stuff
  (setq default-tab-width 4)

  ;; Get rid of all the gui stuff
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; don't show the menubar, 
  (add-to-list 'default-frame-alist '(undecorated . t))

#+END_SRC

* Completion
#+begin_src emacs-lisp
      ;;corfu
    (fset #'jsonrpc--log-event #'ignore)
    (use-package corfu
        :ensure t
        :custom
        (corfu-auto t)
        (corfu-auto-prefix 5)
        (corfu-auto-delay 0.20)
        (corfu-popupinfo-delay 0.2)
        :bind (:map corfu-map
                    ("C-c i" . corfu-info-documentation))
        :hook ((prog-mode . corfu-mode)
               (eshell-mode . corfu-mode))
        :init
        (corfu-popupinfo-mode))

    (use-package corfu-terminal
      :ensure t)

    (unless (display-graphic-p)
      (corfu-terminal-mode +1))


      ;;(use-package company
       ;; :ensure t)


      ;; orderless completion style 
      (use-package orderless
        :ensure t
        :custom
        (completion-styles '(orderless))
        (completion-category-overrides '((file (styles basic partial-completion)))))


      ;; general completion settings 
      (setq completion-cycle-threshold 3)
      (setq completion-show-help t)


      ;; anotations in minibuffer
      (use-package marginalia
        :ensure t
        :init
        (marginalia-mode))


      ;; key chord completion

      (use-package which-key
        :ensure t
        :init
        (which-key-mode))
#+end_src

#+RESULTS:

* magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* Modeline
#+begin_src emacs-lisp
  ;; (use-package doom-modeline
  ;;   :ensure t
  ;;   :init
  ;;   (doom-modeline-mode))
#+end_src
* Org-mode
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq-default org-startup-indented t
                org-startup-folded t 
                org-pretty-entities t
                org-use-sub-superscripts "{}"
                org-hide-emphasis-markers t
                org-startup-with-inline-images t
                org-image-actual-width '(300)
                org-enforce-todo-dependencies t
                org-agenda-todo-list-sublevels t
                org-startup-with-inline-images t)
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/inbox.org" "Tasks")
             "* TODO  %? %^G\n %i\n %a \n %T")
            ("n" "Note" entry (file+datetree "~/org/notes.org")
             "* %?\nEntered on %U\n %i\n %a")))
    :config
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (add-hook 'org-mode-hook #'visual-line-mode))


  ;; download images
  (use-package org-download
    :ensure t
    :init
    (setq-default org-download-image-dir "~/org/pictures")
    :config
    (add-hook 'dired-mode-hook #'org-download-enable))
#+end_src

#+RESULTS:
: t

** anki
#+begin_src emacs-lisp 
  (use-package anki-editor
    :ensure  t
    :after org-noter
    :config
    ; I like making decks
    (setq anki-editor-create-decks 't))
#+end_src
* Programming Specific
** Github copilot (DISABLED)
#+begin_src emacs-lisp
  ;; (use-package quelpa
  ;;   :ensure t)
  ;; (use-package quelpa-use-package
  ;;   :ensure t)
  ;; (use-package copilot
  ;;   :quelpa (copilot :fetcher github
  ;;                    :repo "copilot-emacs/copilot.el"
  ;;                    :branch "main"
  ;;                    :files ("*.el"))
  ;;   :bind (:map copilot-mode-map
  ;;                ("C-c c a" . copilot-accept-completion)))
  ;; ;; you can utilize :map :hook and :config to customize copilot
  ;; ;; you can utilize :map :hook and :config to customize copilot
#+end_src

#+RESULTS:

** LSP
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :bind (:map eglot-mode-map
                  ("C-c i" . eglot-find-implementation)))
#+end_src

#+RESULTS:
: eglot-find-implementation

** Rust
:LOGBOOK:
CLOCK: [2024-04-26 Fri 10:53]--[2024-04-26 Fri 10:53] =>  0:00
:END:
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t)
#+end_src

#+RESULTS:

** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :ensure t)
#+end_src

** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src 

#+RESULTS:

* Action Alist
** display-buffer-alist
*** Eshell 
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*e?shell\\*"
                 (display-buffer-reuse-window)
                 (display-buffer-below-selected)
                 (window-height . 12)
                 ))

  (add-to-list 'display-buffer-alist
               '("\\*vterm\\*"
                 (display-buffer-reuse-window)
                 (display-buffer-below-selected)
                 ))
  (add-to-list 'display-buffer-alist
               '("\\*Org Src settings.org\\[ emacs-lisp \\]\\*"
                 (display-buffer-reuse-window)
                 (display-buffer-below-selected)
                 ))

#+end_src

#+RESULTS:
| \*Org Src settings.org\[ emacs-lisp \]\* | (display-buffer-reuse-window) | (display-buffer-below-selected) |                      |
| \*Org Src settings.org[ emacs-lisp ]\*   | (display-buffer-reuse-window) | (display-buffer-below-selected) |                      |
| \*Org                                    | (display-buffer-reuse-window) | (display-buffer-below-selected) |                      |
| \*Org Src\.\+                            | (display-buffer-reuse-window) | (display-buffer-below-selected) |                      |
| \*Org Src.+                              | (display-buffer-reuse-window) | (display-buffer-below-selected) |                      |
| \*vterm\*                                | (display-buffer-reuse-window) | (display-buffer-below-selected) | (window-height . 12) |
| \*e?shell\*                              | (display-buffer-reuse-window) | (display-buffer-below-selected) | (window-height . 12) |
| \*v?e?shell\*                            | (display-buffer-reuse-window) | (display-buffer-below-selected) | (window-height . 12) |
| \*Org Src                                | (display-buffer-reuse-window) | (display-buffer-below-selected) |                      |
| *Org Src*                                  | (display-buffer-reuse-window) | (display-buffer-below-selected) |                      |
| \*Org Src\*                              | (display-buffer-reuse-window) | (display-buffer-below-selected) |                      |
| \*eshell\*                               | (display-buffer-reuse-window) | (display-buffer-below-selected) | (window-height . 12) |
