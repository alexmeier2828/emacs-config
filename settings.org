* Packages
#+BEGIN_SRC emacs-lisp
  ;; load package manager, add the Melpa package registry
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  ;; bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  ;; load evil
  (use-package evil
    :ensure t ;; install the evil package if not installed
    :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config ;; tweak evil after loading it
    (evil-mode)

    ;; example how to map a command in normal mode (called 'normal state' in evil)
    (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit))

  

#+END_SRC
* Startup
#+begin_src emacs-lisp
  (setq initial-buffer-choice "~/.emacs.d/start-page.org")
#+end_src
* Key Maps
** Global
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-h") ctl-x-map)
  (global-set-key (kbd "C-c s") 'eshell)

#+END_SRC

#+RESULTS:
: eshell

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox t))
#+END_SRC

* Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
            (lambda()
              (electric-pair-mode t)
              ))
#+END_SRC

* General
#+BEGIN_SRC emacs-lisp
  ;; Set correct tab stuff
  (setq default-tab-width 4)

  ;; Get rid of all the gui stuff
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; don't show the menubar, 
  (add-to-list 'default-frame-alist '(undecorated . t))

#+END_SRC

* Completion
#+begin_src emacs-lisp
  ;; corfu
  (use-package corfu
    :ensure t
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-echo-documentation 0.25)
    :init
    (global-corfu-mode))

  ;; orderless completion style 
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless)))

  ;; general completion settings 
  (setq completion-cycle-threshold 3)
  (setq completion-show-help t)


  ;; anotations in minibuffer
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))


  ;; key chord completion

  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
* magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode))
#+end_src
* Org-mode
#+begin_src emacs-lisp
  (setq-default org-startup-indented t
                org-startup-folded t 
                org-pretty-entities t
                org-use-sub-superscripts "{}"
                org-hide-emphasis-markers t
                org-startup-with-inline-images t
                org-image-actual-width '(300))
#+end_src
