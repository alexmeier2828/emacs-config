* Packages
#+BEGIN_SRC emacs-lisp
  ;; load package manager, add the Melpa package registry
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (package-initialize)

  ;; bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  ;; load evil
  (use-package evil
    :ensure t ;; install the evil package if not installed
    :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config ;; tweak evil after loading it
    (evil-mode)
    (define-prefix-command 'my-leader-map)
    (keymap-set evil-motion-state-map "SPC" 'my-leader-map)
    (keymap-set evil-normal-state-map "SPC" 'my-leader-map)
    ;; example how to map a command in normal mode (called 'normal state' in evil)
    (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit)
    ;; insert mode
    ;; leader maps
    (evil-define-key nil my-leader-map
      "." 'execute-extended-command
      "ff" 'find-file))

#+END_SRC

#+RESULTS:
: t
* ESUP
#+begin_src emacs-lisp
  (use-package esup
    :ensure t
    :pin melpa
    :config
    (setq esup-depth 0))
#+end_src

#+RESULTS:
: t

* Startup
#+begin_src emacs-lisp
  (setq initial-buffer-choice "~/.emacs.d/start-page.org")

  ;; Start server if not started
  (load "server")
  (unless (server-running-p) (server-start))
#+end_src

#+RESULTS:

* Key Maps
** Global
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c s") 'eshell)
  (global-set-key (kbd "C-x p f") 'project-find-file)
  (global-set-key (kbd "C-c r") 'project-find-regexp)
#+END_SRC

#+RESULTS:
: eshell

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t)

  (use-package nord-theme
    :ensure t)

      (load-theme 'gruvbox t)

  ;; Setting font like this should be better for use with daemon
  (setq default-frame-alist
            '((font . "JetbrainsMonoNL Nerd FontMono 7")))
#+END_SRC

#+RESULTS:
: ((font . JetbrainsMonoNL Nerd FontMono 7))

* Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
            (lambda()
              (electric-pair-mode t)
              ))
#+END_SRC
* Emacs Everywhere
#+BEGIN_SRC emacs-lisp
  (use-package emacs-everywhere
    :ensure t)
#+END_SRC

#+RESULTS:

* General
#+BEGIN_SRC emacs-lisp
  ;; Set correct tab stuff
  (setq default-tab-width 4)

  ;; Get rid of all the gui stuff
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  
  ;; don't show the menubar, 
  (add-to-list 'default-frame-alist '(undecorated . t))

#+END_SRC

* Completion
#+begin_src emacs-lisp
    ;;corfu
  (fset #'jsonrpc--log-event #'ignore)
  (use-package corfu
      :ensure t
      :custom
      (corfu-auto t)
      (corfu-auto-prefix 5)
      (corfu-auto-delay 0.20)
      (corfu-popupinfo-delay 0.2)
      :bind (:map corfu-map
                  ("C-c i" . corfu-info-documentation))
      :hook ((prog-mode . corfu-mode)
             (eshell-mode . corfu-mode))
      :init
      (corfu-popupinfo-mode))

  (use-package corfu-terminal
    :ensure t)

  (unless (display-graphic-p)
    (corfu-terminal-mode +1))

  ;; orderless completion style 
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless)))


  ;; general completion settings 
  (setq completion-cycle-threshold 3)
  (setq completion-show-help t)


  ;; anotations in minibuffer
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))


  ;; key chord completion
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src

#+RESULTS:

* magit
#+begin_src emacs-lisp
    (use-package magit
          :ensure t
          :commands magit
      )
#+end_src

#+RESULTS:

* Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode))
#+end_src
* Org-mode
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq-default org-startup-indented t
                org-startup-folded t 
                org-pretty-entities t
                org-use-sub-superscripts "{}"
                org-hide-emphasis-markers t
                org-startup-with-inline-images t
                org-image-actual-width '(300)
                org-enforce-todo-dependencies t
                org-agenda-todo-list-sublevels t
                org-startup-with-inline-images t)
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/inbox.org" "Tasks")
             "* TODO  %? %^G\n")
            ("n" "Note" entry (file+datetree "~/org/notes.org")
             "* %?\nEntered on %U")))
    (setq org-clock-sound t)
    :config
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (add-hook 'org-mode-hook #'visual-line-mode))

#+end_src

#+RESULTS:
: t
* Programming Specific
** LSP
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :bind (:map eglot-mode-map
                  ("C-c i" . eglot-find-implementation)))
#+end_src

#+RESULTS:
: eglot-find-implementation

** Rust
:LOGBOOK:
CLOCK: [2024-04-26 Fri 10:53]--[2024-04-26 Fri 10:53] =>  0:00
:END:
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t)
#+end_src

#+RESULTS:

** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :ensure t)
#+end_src

** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src 

#+RESULTS:

* Action Alist
** display-buffer-alist
*** Eshell 
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*eshell\\*"
                 (display-buffer-reuse-window)
                 (display-buffer-below-selected)
                 (window-height . 12)
                 ))

#+end_src

#+RESULTS:
| \*eshell\* | (display-buffer-reuse-window)                  | (display-buffer-below-selected) | (window-height . 12)            |                      |
| \*eshell\* | (setq switch-to-buffer-obey-display-actions t) | (display-buffer-reuse-window)   | (display-buffer-below-selected) | (window-height . 12) |

* Email
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    ;; :defer 20 ; Wait until 20 seconds after startup
    :config

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")

    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash"))

  (setq smtpmail-stream-type 'starttls)
  (setq user-mail-address "ameier42@gmail.com")
  (setq user-full-name "Alex Meier")
  (setq smtpmail-default-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587)
  (setq message-send-mail-function 'smtpmail-send-it)
  (auth-source-pass-enable)
  (setq auth-sources '(password-store))
  (setq auth-source-debug t)
  (setq auth-source-do-cache nil)
  (setq mail-user-agent 'mu4e-user-agent)
  (setq mu4e-user-mail-address-list '("ameier42@gmail.com"))
  (setq smtpmail-cred-user "ameier42@gmail.com")
  (make-mu4e-context
   :name "gmail"
   :match-func
   (lambda (msg)
     (when msg
       (string-prefix-p "~/Mail"(mu4e-message-field msg :maildir))))
   :vars '((user-mail-address . "ameier42@gmail.com")
           (user-full-name . "Alex Meier")
  	 (smtpmail-cred-user . "ameier42@gmail.com")
           (smtpmail-smtp-server . "smtp.gmail.com")
           (smtpmail-stream-type . 'starttls)
           (smtpmail-smtp-service . 587)
           (mu4e-drafts-folder . "~/Mail/[Gmail]/Drafts")
           (mu4e-sent-folder . "~/Mail/[Gmail]/Sent Mail")
           (mu4e-refile-folder . "~/Mail/[Gmail]/All Mail")
           (mu4e-trash-folder . "~/Mail/[Gmail]/Trash")))


  ;; Configure the function to use for sending mail
  (setq message-send-mail-function 'smtpmail-send-it)
#+end_src

#+RESULTS:
: smtpmail-send-it
