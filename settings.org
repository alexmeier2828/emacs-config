* Packages
#+BEGIN_SRC emacs-lisp
  ;; load package manager, add the Melpa package registry
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (package-initialize)

  ;; bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  ;; load evil
  (use-package evil
    :ensure t ;; install the evil package if not installed
    :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config ;; tweak evil after loading it
    (evil-mode)
    (define-prefix-command 'my-leader-map)
    (keymap-set evil-motion-state-map "SPC" 'my-leader-map)
    (keymap-set evil-normal-state-map "SPC" 'my-leader-map)
    ;; example how to map a command in normal mode (called 'normal state' in evil)
    (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit)
    ;; insert mode
    ;; leader maps
    (evil-define-key nil my-leader-map
      "." 'execute-extended-command
      "ff" 'find-file))

  (use-package vterm
    :ensure t
    :init
    :config
    (global-set-key (kbd "C-c t") 'vterm))

#+END_SRC

#+RESULTS:
: t

* Startup
#+begin_src emacs-lisp
  (setq initial-buffer-choice "~/.emacs.d/start-page.org")
#+end_src
* Key Maps
** Global
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c s") 'eshell)
  (global-set-key (kbd "C-x p f") 'project-find-file)
  (global-set-key (kbd "C-c r") 'project-find-regexp)
  (keyboard-translate ?\C-h ?\C-x)
  (keyboard-translate ?\C-x ?\C-h)
#+END_SRC

#+RESULTS:
: eshell

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox t))

  (use-package vscode-dark-plus-theme
    :ensure t)
#+END_SRC

* Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
            (lambda()
              (electric-pair-mode t)
              ))
#+END_SRC

* General
#+BEGIN_SRC emacs-lisp
  ;; Set correct tab stuff
  (setq default-tab-width 4)

  ;; Get rid of all the gui stuff
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; don't show the menubar, 
  (add-to-list 'default-frame-alist '(undecorated . t))

#+END_SRC

* Completion
#+begin_src emacs-lisp
    ;;corfu
  (fset #'jsonrpc--log-event #'ignore)
  (use-package corfu
      :ensure t
      :custom
      (corfu-auto t)
      (corfu-auto-prefix 5)
      (corfu-auto-delay 0.20)
      (corfu-popupinfo-delay 0.2)
      :bind (:map corfu-map
                  ("C-c i" . corfu-info-documentation))
      :hook ((prog-mode . corfu-mode)
             (eshell-mode . corfu-mode))
      :init
      (corfu-popupinfo-mode))

  (use-package corfu-terminal
    :ensure t)

  (unless (display-graphic-p)
    (corfu-terminal-mode +1))


    ;;(use-package company
     ;; :ensure t)


    ;; orderless completion style 
    (use-package orderless
      :ensure t
      :config
      (setq completion-styles '(orderless)))


    ;; general completion settings 
    (setq completion-cycle-threshold 3)
    (setq completion-show-help t)


    ;; anotations in minibuffer
    (use-package marginalia
      :ensure t
      :init
      (marginalia-mode))


    ;; key chord completion

    (use-package which-key
      :ensure t
      :init
      (which-key-mode))
#+end_src

#+RESULTS:

* magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode))
#+end_src
* Org-mode
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq-default org-startup-indented t
                org-startup-folded t 
                org-pretty-entities t
                org-use-sub-superscripts "{}"
                org-hide-emphasis-markers t
                org-startup-with-inline-images t
                org-image-actual-width '(300)
                org-enforce-todo-dependencies t
                org-agenda-todo-list-sublevels t
                org-startup-with-inline-images t)
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/inbox.org" "Tasks")
             "* TODO  %? %^G\n %i\n %a \n %T")
            ("n" "Note" entry (file+datetree "~/org/notes.org")
             "* %?\nEntered on %U\n %i\n %a")))
    :config
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (add-hook 'org-mode-hook #'visual-line-mode))


  ;; download images
  (use-package org-download
    :ensure t
    :init
    (setq-default org-download-image-dir "~/org/pictures")
    :config
    (add-hook 'dired-mode-hook #'org-download-enable))
#+end_src

#+RESULTS:
: t

** anki
#+begin_src emacs-lisp 
  (use-package anki-editor
    :ensure  t
    :after org-noter
    :config
    ; I like making decks
    (setq anki-editor-create-decks 't))
#+end_src
* Programming Specific
** Github copilot (DISABLED)
#+begin_src emacs-lisp
  ;; (use-package quelpa
  ;;   :ensure t)
  ;; (use-package quelpa-use-package
  ;;   :ensure t)
  ;; (use-package copilot
  ;;   :quelpa (copilot :fetcher github
  ;;                    :repo "copilot-emacs/copilot.el"
  ;;                    :branch "main"
  ;;                    :files ("*.el"))
  ;;   :bind (:map copilot-mode-map
  ;;                ("C-c c a" . copilot-accept-completion)))
  ;; ;; you can utilize :map :hook and :config to customize copilot
  ;; ;; you can utilize :map :hook and :config to customize copilot
#+end_src

#+RESULTS:

** LSP
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :bind (:map eglot-mode-map
                  ("C-c i" . eglot-find-implementation)))
#+end_src

#+RESULTS:
: eglot-find-implementation

** Rust
:LOGBOOK:
CLOCK: [2024-04-26 Fri 10:53]--[2024-04-26 Fri 10:53] =>  0:00
:END:
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t)
#+end_src

#+RESULTS:

** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :ensure t)
#+end_src

** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src 

#+RESULTS:

* Action Alist
** display-buffer-alist
*** Eshell 
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*eshell\\*"
                 (display-buffer-reuse-window)
                 (display-buffer-below-selected)
                 (window-height . 12)
                 ))

#+end_src

#+RESULTS:
| \*eshell\* | (display-buffer-reuse-window)                  | (display-buffer-below-selected) | (window-height . 12)            |                      |
| \*eshell\* | (setq switch-to-buffer-obey-display-actions t) | (display-buffer-reuse-window)   | (display-buffer-below-selected) | (window-height . 12) |
